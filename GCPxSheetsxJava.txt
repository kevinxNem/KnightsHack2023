Google Form Java Client API — Creating a Form and Reading Responses
In this tutorial, we will use the Goole Form Java Client API to create, update and read responses from a Google Form configured as a Quiz. Code Provided.
Gaetano Piazzolla
Gaetano Piazzolla

·
Follow

4 min read
·
Mar 21, 2022
178


1






Guess Why.
Why?
Google Form API has been published recently after extensive usage and testing in beta from several early adopters. Those APIs are really powerful. In several projects I’ve worked on there was the need for a configurable user input form.

For lots of projects, I had to build a custom “form-builder”, that had to render a form with configurable fields. An example is an anamnesis questionnaire for the vaccine registration that we built recently while I was working in DXC. Those kinds of questions change very often and need to be configurable.

Despite building a feature like this could be fun and a nice programming exercise, when it comes to costs, several factors push through the usage of an already made on-premise solution such as Google Form API. To enucleate a few of the major advantages: standardized user experience, zero maintenance costs, and easy configuration and access through already built clients for every programming language, as we will see in the following chapters using Java.

1- Configuring a Google Cloud Platform Project from the Web Console
Make sure to follow each step of the provided links. My personal suggestion is to don’t follow on “next steps” but come back here, as the google documentation is somehow intricated.

Supposing that we have already created a Google Cloud Account, the first thing to do is to create a new Google Cloud Project. Once done, we have to enable Google Forms API and Google Drive API (we need Google Drive API to change the permission of the Google Form Object and make it accessible from everyone with the link).

Next, we have to create the Service Account needed to access the Google Form from the Java application and create the credentials for the Service Account. Once done, download the JSON file and store it in a location that has to be included in the Java Classpath (we have to read that file. Make sure to not commit it on public repositories)

2- Using the Java Client Library to Create the Boilerplate Code for Authorization
We need the following dependencies. I suggest sticking with those versions if you want to work with the exact code here provided.

com.google.apis:google-api-services-forms:v1-rev20220307–1.32.1
com.google.apis:google-api-services-drive:v3-rev20220214–1.32.1
com.google.api-client:google-api-client-jackson2:1.28.1
com.google.auth:google-auth-library-oauth2-http:1.5.3
This is all the code we need to set up the two services of the API we enabled (Forms and Drive). You would want to change the APPLICATION_NAME to the one you have configured in the previous step.


Finally, the method above will create an authentication token to use for authorizing our requests. As you can see, it reads the “cred.json” file, which is the file we downloaded earlier, accessing it from the classpath. Again, make sure to not commit it on public repositories.


3- Implement 3 Methods to Create a Google Form, transform it into a Quiz and add Questions to it.
Nothing really special to say here. It’s standard sub-optimal Java code, which follows pretty much the documentation provided for the REST API. In this step, you may want to “system.out” the form id, as it’s needed to actually access the form from the Web.


4- Make the Quiz Accessible
We have to use the Google Drive API and grant the just created form, readable access to anyone. (prerequisite: make sure that you granted your application to use those APIs together with the FORM APIs in the first chapter)


5- Take the Quiz from the Standard Google Form Web Application Interface
After publishing, we could access the newly created form accessing it from the browser. Just replace the $form_id$ in the following template:

https://docs.google.com/forms/d/$form_id$

And you should be able to access and answer the riddle:


5- Read the responses given through the Java Client
Pretty straight-forward. We just need to:


This will print a well-formatted JSON, which, of course, we can read also using standard java code using POJO objects.

“responses” : [ {
  “answers” : {
    “2777c1e0” : {
      “questionId” : “2777c1e0”,
      “textAnswers” : {
          “answers” : [ {
             “value” : “Beyoncè”
... 
6- Conclusion
Here you can find the GIST with the full implementation. Please, consider subscribing and or sharing this article if you find it useful. Thank you for reading and have fun with the Google Form API!
